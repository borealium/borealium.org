name: Build

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  schedule:
    # Run every hour to get the latest updates in PÃ¡hkat:
    - cron: "0 * * * *"
permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Setup repo
        uses: actions/checkout@v4

      - name: Cache Deno
        id: cache-deno
        uses: actions/cache@v3
        with:
          path: |
            ~/.deno
            ~/.cache/deno
          key: ${{ runner.os }}-deno-${{ hashFiles('**/deps.ts') }}

      - name: Cache Cargo
        id: cache-cargo
        uses: actions/cache@v3
        with:
          path: _cargo
          key: ${{ runner.os }}-cargo

      - name: Install Rust toolchain
        if: ${{ !steps.cache-cargo.outputs.cache-hit }}
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Build portal
        run: deno task build

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3

  deploy:
    needs: build

    permissions:
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  push-to-spaces:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Setup repo
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: github-pages
      - name: Extract artifact
        run: |
          mkdir -p _site
          tar -xf artifact.tar -C _site
      - name: Display structure of downloaded files
        run: ls -R _site
      - name: Configure AWS CLI
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DO_SPACES_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DO_SPACES_SECRET }}
          AWS_DEFAULT_REGION: ams3
          AWS_ENDPOINT: https://ams3.digitaloceanspaces.com
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_DEFAULT_REGION
          aws configure set default.s3.endpoint_url $AWS_ENDPOINT

      - name: Sync to DigitalOcean Spaces
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DO_SPACES_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DO_SPACES_SECRET }}
          AWS_DEFAULT_REGION: ams3
          AWS_ENDPOINT: https://ams3.digitaloceanspaces.com
        run: |
          aws s3 sync _site/client/ s3://borealium/client --endpoint-url $AWS_ENDPOINT --acl public-read
